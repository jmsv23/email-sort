// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  categories    Category[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  profile_id       String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[] // Add the reverse relation
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Category {
  id          String    @id @default(cuid())
  userId      String
  name        String
  description String?   @db.Text // Used for AI classification prompts
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([userId, name])
  @@index([userId])
}

model Message {
  id               String    @id @default(cuid())
  provider         String    // Reference to Account.provider
  providerAccountId String   // Reference to Account.providerAccountId
  gmailMessageId   String    @unique
  threadId         String?
  categoryId       String?
  subject          String?   @db.Text
  from             String?   @db.Text
  to               String?   @db.Text
  snippet          String?   @db.Text
  bodyText         String?   @db.Text
  bodyHtml         String?   @db.Text
  aiSummary        String?   @db.Text
  aiClassification Json?     // {categoryId, reason, confidence}
  importedAt       DateTime  @default(now())
  archived         Boolean   @default(false)
  unsubscribed     Boolean   @default(false)

  account  Account   @relation(fields: [provider, providerAccountId], references: [provider, providerAccountId], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([provider, providerAccountId])
  @@index([categoryId])
  @@index([archived])
  @@index([gmailMessageId])
}
