// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  createdAt DateTime   @default(now())
  accounts  Account[]
  categories Category[]
  sessions  Session[]
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  provider          String    // "google"
  providerAccountId String
  accessToken       String?   @db.Text // Encrypted
  refreshToken      String?   @db.Text // Encrypted
  tokenExpiry       DateTime?
  gmailProfileId    String?
  createdAt         DateTime  @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  userId      String
  name        String
  description String?   @db.Text // Used for AI classification prompts
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([userId, name])
  @@index([userId])
}

model Message {
  id               String    @id @default(cuid())
  accountId        String
  gmailMessageId   String    @unique
  threadId         String?
  categoryId       String?
  subject          String?   @db.Text
  from             String?   @db.Text
  to               String?   @db.Text
  snippet          String?   @db.Text
  bodyText         String?   @db.Text
  bodyHtml         String?   @db.Text
  aiSummary        String?   @db.Text
  aiClassification Json?     // {categoryId, reason, confidence}
  importedAt       DateTime  @default(now())
  archived         Boolean   @default(false)
  unsubscribed     Boolean   @default(false)

  account  Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([accountId])
  @@index([categoryId])
  @@index([archived])
  @@index([gmailMessageId])
}
